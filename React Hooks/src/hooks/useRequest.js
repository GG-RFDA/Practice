import {useEffect, useState} from "react";
// Параметром хук будет принимать функцию-запрос, которая должна получить какие-то данные
export default function (request) {
    /*
     * Создаём первое состояние (сюда будем присваивать то, что получили из запроса).
     * По умолчанию хук будет null.
     */
    const [data, setData] = useState(null);
    /*
     * Создаём второе состояние, которое отслеживает загрузку данных в данный момент.
     * По умолчанию хук будет false.
     */
    const [loading, setLoading] = useState(false);
    /*
     * Создаём третье состояние (оно нужно, если запрос прошёл с ошибкой).
     * Если запрос прошёл с ошибкой, то помещаем туда сообщение.
     */
    const [error, setError] = useState('');
    /*
     * Воспользуемся хуком useEffect.
     * Первым параметром передаём функцию, а вторым - массив зависимостей.
     */
    useEffect(() => {
        setLoading(true)
        // Создаём timeout (имитируем длительный запрос)
        setTimeout(() => {
            request()
                .then(response => setData(response.data))
                /*
                 * Обрабатываем ошибки, создавая блок catch.
                 * В случае, если ошибка произошла, то пропишем setError и поместим туда полученную ошибку.
                 */
                .catch(error => setError(error))
                 // После того, как запрос прошёл и был получен ответ от сервера, задаём false.
                .finally(() => setLoading(false))
            // Пусть запрос будет выполняться 1000 миллисекунд
        }, 1000)

    }, [])
    // Из хука возвращаем кортеж
    return [data, loading, error]
};